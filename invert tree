/*
Algorithm â€“ Mirror(tree): 
 
(1)  Call Mirror for left-subtree    i.e., Mirror(left-subtree)
(2)  Call Mirror for right-subtree  i.e., Mirror(right-subtree)
(3)  Swap left and right subtrees.
          
*/

TreeNode* invertTree(TreeNode* root) {
        
        //RECURSIVE SOLUTION
        if(root == NULL)
        {
            return NULL;
        }
        root -> left = invertTree(root -> left);
        root -> right = invertTree(root -> right);
        
        //recursion complete 
        //now swap left-subtree, right-subtree
        swap(root -> left, root -> right);
        return root;
    }
